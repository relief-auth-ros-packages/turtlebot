<launch>

  <!-- valid for rb1_base -->
  <!-- The environment variables should be set in a file or .bashrc -->

  <arg name="num_cameras" default="$(env NUM_CAMERAS)"/>

  <!-- ROBOT -->
  <arg if="$(eval num_cameras == 1)" name="xacro_robot" default="rb1_base_RELIEF_one_camera.urdf.xacro"/>
  <arg if="$(eval num_cameras == 2)" name="xacro_robot" default="rb1_base_RELIEF_two_cameras.urdf.xacro"/>
  <arg if="$(eval num_cameras == 3)" name="xacro_robot" default="rb1_base_RELIEF_three_cameras.urdf.xacro"/>

  <!-- LASER -->
  <arg name="has_laser"   default="$(optenv ROBOT_HAS_LASER true)"/>
  <arg name="laser_model" default="$(optenv ROBOT_LASER_MODEL hokuyo_ust)"/>
  <arg name="laser_port"  default="$(optenv ROBOT_LASER_PORT /dev/ttyACM0)"/>
  <arg name="ip_address"  default="$(optenv ROBOT_LASER_IP)"/>
  <arg name="laser_node"  default="front_laser"/>

  <!-- DOCKER -->
  <arg name="has_docker"  default="$(optenv ROBOT_HAS_DOCKER false)"/>

  <!-- RGBD -->
  <arg name="has_rgbd_camera"   default="$(optenv ROBOT_HAS_RGBD_CAMERA true)"/>
  <arg name="rgbd_model"        default="$(optenv ROBOT_RGBD_MODEL orbbec)"/>
  <arg name="rgbd_camera_node"  default="front_rgbd_camera"/>
  <arg name="rgbd_camera_id"    default="$(optenv ROBOT_RGBD_CAMERA_ID #1)"/>

  <!-- OTHERS -->
  <arg name="pad_model" default="$(optenv ROBOT_PAD_MODEL ps4)"/>


  <!-- ******************************************************************** -->
  <!--
  <include file="$(find poi_manager)/launch/poi_manager.launch"/>
  -->

  <!-- ******************************************************************** -->
  <!-- map_nav_manager -->
  <!--
  <include file="$(find map_nav_manager)/launch/map_nav_complete.launch"/>
  -->

  <!-- ****************************************************************** -->
  <!-- Load robot model to param server, start robot_state_publisher - publish fixed transforms -->
  <include file="$(find rb1_base_description)/launch/rb1_base_state.launch">
    <arg name="prefix"  value="/"/>
    <arg name="version" value="$(arg xacro_robot)"/>
  </include>

  <!-- ****************************************************************** -->
  <!-- start robotnik_base_hw -->
  <include file="$(find rb1_base_bringup)/launch/robotnik_base_hw.launch"/>

  <!-- ****************************************************************** -->
  <!-- IMU -->
  <include file="$(find rb1_base_bringup)/launch/px4.launch"/>

  <!-- ****************************************************************** -->
  <!-- start robot web server -->
  <!--include file="$(find rb1_base_web)/launch/rb1_base_web.launch"/-->

  <!-- ****************************************************************** -->
  <!-- start rb1_base_control -->
  <include file="$(find rb1_base_control)/launch/rb1_base_control.launch">
    <arg name="prefix"  value="/"/>
    <arg name="sim"     value="false"/>
  </include>

  <!-- ****************************************************************** -->
  <!-- start localization configuration -->
  <!--
  <include file="$(find rb1_base_localization)/launch/rb1_base_localization_basic.launch"/>
  -->

  <!-- ****************************************************************** -->
  <!-- start rb1_base_pad - robot ps joystick -->
  <include file="$(find rb1_base_pad)/launch/rb1_base_pad.launch">
    <arg name="pad_model" value="$(arg pad_model)"/>
  </include>

  <!-- ****************************************************************** -->
  <!-- start laser node -->
  <include if="$(arg has_laser)" file="$(find rb1_base_bringup)/launch/$(arg laser_model).launch">
    <arg name="frame_id"    value="front_laser_link"/>
    <arg name="ip_address"  value="$(arg ip_address)"/>
    <arg name="port"        value="$(arg laser_port)"/>
    <arg name="node_name"   value="$(arg laser_node)"/>
  </include>

  <!-- ****************************************************************** -->
  <!-- start rgbd camera node -->

  <!-- One camera -->
  <group if="$(eval num_cameras == 1)">
    <include if="$(arg has_rgbd_camera)" file="$(find rb1_base_bringup)/launch/orbbec.launch">
      <arg name="camera"    value="$(arg rgbd_camera_node)"/>
      <arg name="prefix"    value="$(arg rgbd_camera_node)"/>
      <arg name="device_id" value="18052230084"/>
    </include>
  </group>

  <!-- Two cameras -->
  <group if="$(eval num_cameras == 2)">
    <include if="$(arg has_rgbd_camera)" file="$(find rb1_base_bringup)/launch/orbbec.launch">
      <arg name="camera"    value="front_rgbd_camera"/>
      <arg name="prefix"    value="front_rgbd_camera"/>
      <arg name="device_id" value="18052230084"/> <!-- check package astra_launch/launch/astra.launch for correct format -->
    </include>
    <include if="$(arg has_rgbd_camera)" file="$(find rb1_base_bringup)/launch/orbbec.launch">
      <arg name="camera"    value="left_rgbd_camera"/>
      <arg name="prefix"    value="left_rgbd_camera"/>
      <arg name="device_id" value="18110830867"/>
    </include>
  </group>

  <!-- Three cameras -->
  <group if="$(eval num_cameras == 3)">
    <include file="$(find rb1_base_bringup)/launch/orbbec.launch">
      <arg name="camera"    value="front_rgbd_camera"/>
      <arg name="prefix"    value="front_rgbd_camera"/>
      <arg name="device_id" value="18052230084"/> <!-- check package astra_launch/launch/astra.launch for correct format -->
    </include>
    <include file="$(find rb1_base_bringup)/launch/orbbec.launch">
      <arg name="camera"    value="right_rgbd_camera"/>
      <arg name="prefix"    value="right_rgbd_camera"/>
      <arg name="device_id" value="18042930014"/>
    </include>
    <include file="$(find rb1_base_bringup)/launch/orbbec.launch">
      <arg name="camera"    value="left_rgbd_camera"/>
      <arg name="prefix"    value="left_rgbd_camera"/>
      <arg name="device_id" value="18110830867"/>
      <!--arg name="device_id" value="2bc5/0401@1/25"/-->
    </include>
  </group>

  <!-- ****************************************************************** -->
  <!-- start calibrator -->
  <!--
  <include file="$(find imu_calibrator)/launch/calibrator.launch"/>
  -->

  <!-- ******************************************************************** -->
  <!-- start docking -->
  <!--
  <include if="$(arg has_docker)" file="$(find rb1_base_navigation)/launch/docking/rb1_base_docking.launch"/>
  -->
</launch>
